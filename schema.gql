# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type UserModel {
  id: String!
  email: String!
  password: String!
  name: String!
  pseudo: String!
  avatar: String!
  twoFactorSecret: String!
  isTwoFactorEnabled: Boolean!
  status: String!
}

type ChannelModel {
  id: ID!
  name: String!
  isPrivate: Boolean!
  isDirectMessage: Boolean!
  password: String
  owner: UserModel
  message: [MessageModel!]!
  members: [UserModel!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type MessageModel {
  id: ID!
  content: String!
  userId: String!
  user: UserModel
  channelId: String!
  channel: ChannelModel
  createdAt: DateTime!
}

type OperationResult {
  success: Boolean!
  error: String
}

type ChannelDTO {
  id: ID!
  name: String!
  isPrivate: Boolean!
  password: String
  ownerId: String!
}

type CreateChannelOutput {
  success: Boolean!
  error: String
  channel: ChannelDTO
}

type MessageDTO {
  id: String!
  content: String!
}

type SendMessageOutput {
  success: Boolean!
  message: MessageDTO
  error: String
}

type UpdateMessageOutput {
  success: Boolean!
  error: String
}

type DeleteMessageOutput {
  success: Boolean!
  error: String
}

type UserOutputDTO {
  name: String!
  avatar: String!
  status: String!
}

type ChannelOutputDTO {
  id: String!
  name: String!
  isPrivate: Boolean!
  isDirectMessage: Boolean!
  ownerId: String
  owner: UserOutputDTO
  members: [UserOutputDTO!]!
  admins: [UserOutputDTO!]!
}

type Friendship {
  id: String!
  senderId: String!
  receiverId: String!
  status: FriendshipStatus!
  sender: UserModel
  createdAt: DateTime!
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  REJECTED
}

type Query {
  getMessages(input: GetMessageInput!): [MessageModel]!
  getUsersChannel: [ChannelOutputDTO]!
  users: [UserModel!]!
  getPendingSentFriendRequests: [Friendship!]!
  testingConnexion: String!
  userInformation: UserModel!
  getAllFriendsOfUser: [UserModel!]!
  getUserInformationWithPseudo(pseudo: String!): UserModel!
  searchUsers(term: String!): [UserModel!]!
}

input GetMessageInput {
  channelId: String!
}

type Mutation {
  sendMessage(input: SendMessageInput!): SendMessageOutput!
  updateMessage(input: UpdateMessageInput!): UpdateMessageOutput!
  deleteMessage(input: DeleteMessageInput!): DeleteMessageOutput!
  manageUser(input: ManageUserInput!): OperationResult!
  createChannel(input: CreateChannelInput!): CreateChannelOutput!
  setChannelPassword(input: ChannelPasswordInput!): OperationResult!
  leaveChannel(input: leaveChannelInput!): OperationResult!
  joinChannel(input: joinChannelInput!): OperationResult!
  blockUser(input: blockUserInput!): OperationResult!
  uploadAvatar(image: Upload!): UserModel!
  sendFriendRequest(receiverPseudo: String!): Boolean!
  acceptFriendRequest(senderPseudo: String!): Boolean!
  rejectFriendRequest(senderPseudo: String!): Boolean!
  cancelSentFriendRequest(receiverPseudo: String!): Boolean!
  updatePseudo(newPseudo: String!): Boolean!
  forgotPassword(email: String!): Boolean!
  resetPassword(resetToken: String!, newPassword: String!): Boolean!
  changePassword(currentPassword: String!, newPassword: String!): Boolean!
  deleteAccount: Boolean!
}

input SendMessageInput {
  channelId: String!
  content: String!
}

input UpdateMessageInput {
  messageId: String!
  newContent: String!
}

input DeleteMessageInput {
  messageId: String!
}

input ManageUserInput {
  targetUserId: String!
  channelId: String!
  action: UserAction!
  duration: Float
}

"""The actions that can be performed on a user"""
enum UserAction {
  KICK
  BAN
  MUTE
  UNMUTE
  UNBAN
  ADD
  UPADMIN
  DOWNADMIN
}

input CreateChannelInput {
  name: String!
  isPrivate: Boolean!
  password: String
}

input ChannelPasswordInput {
  channelId: String!
  password: String
}

input leaveChannelInput {
  channelId: String!
}

input joinChannelInput {
  channelId: String!
  passwordInput: String
}

input blockUserInput {
  blockedId: String!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload